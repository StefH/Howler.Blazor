@page "/"
@using Howler.Blazor.Components

<!-- Inject services -->
@inject IHowl Howl
@inject IHowlGlobal HowlGlobal

<div>
    <table>
        <tr>
            <td><button class="btn btn-primary oi oi-media-play" @onclick="PlayLocal"></button></td>
            <td>Play a local OGG file</td>
        </tr>
        <tr>
            <td><button class="btn btn-primary oi oi-media-play" @onclick="Play2"></button></td>
            <td>Play an audio file with source location</td>
        </tr>
        <tr>
            <td><button class="btn btn-primary oi oi-media-play" @onclick="Play3"></button></td>
            <td>Play an audio file with source location and format</td>
        </tr>
        <tr>
            <td><button class="btn btn-primary oi oi-media-play" @onclick="PlayAudioWithHalfVolume"></button></td>
            <td>Play an audio file with source location, format and volume set to half</td>
        </tr>
        <tr>
            <td><button class="btn btn-primary oi oi-media-play" @onclick="PlayAudioWithQuarterVolume"></button></td>
            <td>Play an audio file with source location, format and volume set to 1 / 4</td>
        </tr>
        <tr>
            <td><button class="btn btn-primary oi oi-media-play" @onclick="PlayLoop"></button></td>
            <td>Play and loop an audio file</td>
        </tr>
        <tr>
            <td><button class="btn btn-primary oi oi-media-pause" @onclick="Pause"></button></td>
            <td>Pause</td>
        </tr>
        <tr>
            <td><button class="btn btn-primary oi oi-media-stop" @onclick="Stop"></button></td>
            <td>Stop</td>
        </tr>
        <tr>
            <td><button class="btn btn-primary oi oi-arrow-top" @onclick="SpeedUp"></button></td>
            <td>Speed Up</td>
        </tr>
        <tr>
            <td><button class="btn btn-primary oi oi-arrow-bottom" @onclick="SpeedDown"></button></td>
            <td>Speed Down</td>
        </tr>
    </table>
    <br />

    <pre>TotalTime : @TotalTime</pre>
    <pre>State : @State</pre>
    <pre>Playback Rate : @Rate</pre>
    <pre>Supported Codes : @SupportedCodes</pre>
    <pre>ErrorMessage : @ErrorMessage</pre>
</div>

@code {
    private const double MaxRate = 4.0;
    private const double MinRate = 0.25;
    protected TimeSpan TotalTime;
    protected double Rate = 1.0;
    protected string State = "-";
    protected string SupportedCodes;
    public string ErrorMessage = "";
    public List<int> SoundIds = new List<int>();

    /// <summary>
    /// InvalidOperationException: JavaScript interop calls cannot be issued at this time. This is because the component is being statically rendererd. When prerendering is enabled, JavaScript interop calls can only be performed during the OnAfterRenderAsync lifecycle method.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            // Display all supported codecs
            var codecs = await HowlGlobal.GetCodecs();
            SupportedCodes = string.Join(", ", codecs);

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Register callbacks
        Howl.OnPlay += e =>
        {
            ErrorMessage = string.Empty;
            State = "Playing";
            TotalTime = e.TotalTime;

            StateHasChanged();
        };

        Howl.OnStop += e =>
        {
            State = "Stopped";

            StateHasChanged();
        };

        Howl.OnPause += e =>
        {
            State = "Paused";

            StateHasChanged();
        };

        Howl.OnRate += e =>
        {
            Rate = e.CurrentRate;

            StateHasChanged();
        };

        Howl.OnPlayError += e =>
        {
            ErrorMessage = $"OnPlayError : {e.Error}";

            StateHasChanged();
        };

        Howl.OnLoadError += e =>
        {
            ErrorMessage = $"OnLoadError : {e.Error}";

            StateHasChanged();
        };
    }

    protected async Task PlayLocal()
    {
        ErrorMessage = string.Empty;
        Rate = 1.0;

        SoundIds.Add(await Howl.Play("resources/TestRecording.ogg"));
    }

    protected async Task Play2()
    {
        ErrorMessage = string.Empty;
        Rate = 1.0;

        SoundIds.Add(await Howl.Play("https://stefsapublic.blob.core.windows.net/test/Estas Tonne - Internal Flight Experience (Live in Cluj Napoca)(1).opus"));
    }

    protected async Task Play3()
    {
        ErrorMessage = string.Empty;
        Rate = 1.0;

        var options = new HowlOptions
        {
            Sources = new[] { "https://lookandstore.blob.core.windows.net/863da396-6e44-4b3b-8db1-e447d87b121f/instrumental_mp3_637141046337946343_99lfo/instrumental_mp3?sv=2018-03-28&sr=b&sig=96LJ7bycF3lrtiWbVP5tK6%2BOOIJKfq7eYPO%2FjOT72ns%3D&se=2022-10-04T18%3A23%3A53Z&sp=rl" },
            Formats = new[] { "mp3" }
        };

        SoundIds.Add(await Howl.Play(options));
    }

    protected async Task PlayAudioWithHalfVolume()
    {
        ErrorMessage = string.Empty;
        Rate = 1.0;

        var options = new HowlOptions
        {
            Sources = new[] { "https://lookandstore.blob.core.windows.net/863da396-6e44-4b3b-8db1-e447d87b121f/instrumental_mp3_637141046337946343_99lfo/instrumental_mp3?sv=2018-03-28&sr=b&sig=96LJ7bycF3lrtiWbVP5tK6%2BOOIJKfq7eYPO%2FjOT72ns%3D&se=2022-10-04T18%3A23%3A53Z&sp=rl" },
            Formats = new[] { "mp3" },
            Volume = 0.5
        };

        SoundIds.Add(await Howl.Play(options));
    }

    protected async Task PlayAudioWithQuarterVolume()
    {
        ErrorMessage = string.Empty;
        Rate = 1.0;

        var options = new HowlOptions
        {
            Sources = new[] { "https://lookandstore.blob.core.windows.net/863da396-6e44-4b3b-8db1-e447d87b121f/instrumental_mp3_637141046337946343_99lfo/instrumental_mp3?sv=2018-03-28&sr=b&sig=96LJ7bycF3lrtiWbVP5tK6%2BOOIJKfq7eYPO%2FjOT72ns%3D&se=2022-10-04T18%3A23%3A53Z&sp=rl" },
            Formats = new[] { "mp3" },
            Volume = 0.25
        };

        SoundIds.Add(await Howl.Play(options));
    }

    protected async Task PlayLoop()
    {
        ErrorMessage = string.Empty;
        Rate = 1.0;

        var options = new HowlOptions
        {
            Sources = new[] { "https://stefsapublic.blob.core.windows.net/test/ding.mp3" },
            Loop = true
        };

        SoundIds.Add(await Howl.Play(options));
    }

    protected async Task Stop()
    {
        foreach (int id in SoundIds)
        {
            await Howl.Stop(id);
        }
    }

    protected async Task SpeedUp()
    {
        if (Rate < MaxRate && State == "Playing")
        {
            foreach (int id in SoundIds)
            {
                await Howl.Rate(id, Rate + .25);
            }
        }
    }

    protected async Task SpeedDown()
    {
        if (Rate > MinRate && State == "Playing")
        {
            foreach (int id in SoundIds)
            {
                await Howl.Rate(id, Rate - .25);
            }
        }
    }

    protected async Task Pause()
    {
        foreach (int id in SoundIds)
        {
            await Howl.Pause(id);
        }
    }
}